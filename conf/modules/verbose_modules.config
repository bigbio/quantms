
// verbose_modules.config
process {

    // Override default publish behavior to include all intermediate outputs,
    // here we use parameter publish_dir_mode.
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // Define custom path for specific spectra processes, all under spectra directory
    withName: '.*:THERMORAWFILEPARSER' {
        publishDir = [
            path: { "${params.outdir}/spectra/thermorawfileparser" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:ISOBARIC_ANALYZER' {
        publishDir = [
            path: { "${params.outdir}/spectra/isobaric_analyzer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:MZML_INDEXING' {
        publishDir = [
            path: { "${params.outdir}/spectra/mzml_indexing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SPECTRUM_FEATURES' {
        publishDir = [
            path: { "${params.outdir}/spectra/spectrum_features" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:MZML_STATISTICS' {
        publishDir = [
            path: { "${params.outdir}/spectra/mzml_statistics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Peptide search engine steps stored in specific path peptide_identification
    withName: '.*:COMET' {
        publishDir = [
            path: { "${params.outdir}/peptide_identification/comet" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:MSGF' {
        publishDir = [
            path: { "${params.outdir}/peptide_identification/msgf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SAGE' {
        publishDir = [
            path: { "${params.outdir}/peptide_identification/sage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Set the default publish for peptide postprocessing steps
    withName: '.*:PERCOLATOR' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/percolator" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:EXTRACT_PSM_FEATURES' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/psm_features" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:CONSENSUSID' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/consensusid" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*.FDR_CONSENSUSID:*' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/fdr_consensusid" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:ID_FILTER' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/id_filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FALSE_DISCOVERY_RATE' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/false_discovery_rate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:MSRESCORE_FEATURES' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/msrescore_features" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PSM_CLEAN' {
        publishDir = [
            path: { "${params.outdir}/peptide_postprocessing/psm_clean" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    // Set the default publish for PTM processing steps
    withName: '.*:LUCIPHOR' {
        publishDir = [
            path: { "${params.outdir}/ptm_localization/luciphor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // DIANN preprocessing steps, final results will be stored in quant_tables directory
    withName: '.*:INDIVIDUAL_ANALYSIS' {
        publishDir = [
            path: { "${params.outdir}/diann_preprocessing/individual_analysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PRELIMINARY_ANALYSIS' {
        publishDir = [
            path: { "${params.outdir}/diann_preprocessing/preliminary_analysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Database generation steps and subworkflows
    withName: '.*:GENERATE_DECOY_DATABASE' {
        publishDir = [
            path: { "${params.outdir}/database_generation/generate_decoy_database" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:ASSEMBLE_EMPIRICAL_LIBRARY' {
        publishDir = [
            path: { "${params.outdir}/database_generation/assemble_empirical_library" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:INSILICO_LIBRARY_GENERATION' {
        publishDir = [
            path: { "${params.outdir}/database_generation/insilico_library_generation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:MSGF_DB_INDEXING' {
        publishDir = [
            path: { "${params.outdir}/database_generation/msgf_db_indexing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Protein related processing steps, not including final quant
    withName: '.*:PROTEIN_INFERENCE_GENERIC|PROTEIN_INFERENCE_EPIFANY' {
        publishDir = [
            path: { "${params.outdir}/protein_identification/protein_inference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FILE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/protein_identification/file_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:ID_MAPPER' {
        publishDir = [
            path: { "${params.outdir}/protein_identification/id_mapper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Additional config files generated in DIANN configuration
    withName: '.*:GENERATE_CFG' {
        publishDir = [
            path: { "${params.outdir}/sdrf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }




}
